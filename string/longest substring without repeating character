
import java.util.*
fun main()
{
    print("enter string")
    val scanner = Scanner(System.`in`)
    val s = "abcabcbb"
     println(s)
    val map = mutableMapOf<Char,Int>()
    var count =0
    var max =0
    for(i in 0 until s.length){
        count =0
        for(j in i until s.length){
            if(!map.containsKey(s[j]))
            {
                count++
                map[s[j]] = map.getOrDefault(s[j],0)+1
            }
            else{
                max = maxOf(max,count)
                map.clear()
                break;
            }
            
         
        }
        max  = maxOf(max,count)
    }

    println("maximum legnth of substring without repeatin character is $max")

}


// optimize-
class Solution {
 fun lengthOfLongestSubstring(s: String): Int {
    val a = IntArray(128) // Create an array to count occurrences of characters

    var start = 0
    var end = 0
    var max = 0

    // Sliding window
    while (end < s.length) {
        a[s[end].toInt()]++ // Increment the count for the current character

        if (a[s[end].toInt()] > 1) { // If there is a duplicate character
            while (a[s[end].toInt()] > 1) {
                a[s[start].toInt()]-- // Decrease count for the start character
                start++ // Move the start of the window
            }
        }
        
        max = maxOf(max, end - start + 1) // Update the maximum length
        end++ // Move the end of the window
    }
    return max
}

}
