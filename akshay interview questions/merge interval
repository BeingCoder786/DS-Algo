class Solution {
    fun merge(intervals: Array<IntArray>): Array<IntArray> {
        // Sort the intervals based on the start value
        val sortedIntervals = intervals.sortedWith(compareBy { it[0] })

        val ans = mutableListOf<IntArray>()

        var currInterval = sortedIntervals[0]
        ans.add(currInterval)

        for (item in sortedIntervals) {
            val curStart = currInterval[0]
            val curEnd = currInterval[1]
            val nextStart = item[0]
            val nextEnd = item[1]

            if (curEnd >= nextStart) {
                // Merge the intervals
                currInterval[1] = maxOf(curEnd, nextEnd)
            } else {
                // No overlap, add the current interval and move to the next
                currInterval = item
                ans.add(currInterval)
            }
        }

        // Convert the list of intervals to an array
        return ans.toTypedArray()
    }
}
