class Solution {
    fun findMin(nums: IntArray): Int {

var left = 0
    var right = nums.size - 1

    // If the array is not rotated (the smallest element is at the beginning)
    if (nums[left] < nums[right]) {
        return nums[left]
    }

    while (left <= right) {
        val mid = left + (right - left) / 2

        // Check if the middle element is greater than the next element
        if (mid < right && nums[mid] > nums[mid + 1]) {
            return nums[mid + 1]
        }

        // Check if the middle element is smaller than the previous element
        if (mid > left && nums[mid] < nums[mid - 1]) {
            return nums[mid]
        }

        // Determine whether to search in the left half or the right half
        if (nums[mid] >= nums[left]) {
            left = mid + 1
        } else {
            right = mid - 1
        }
    }

    return nums[0]
        
    }
}
