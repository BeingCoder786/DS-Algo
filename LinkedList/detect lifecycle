class Solution {
    fun hasCycle(head: ListNode?): Boolean {
        var slow = head
        var fast = head
        while(slow!=null&&fast!=null&&fast.next!=null){
            slow = slow.next
            fast = fast.next.next
            if(slow==fast)
             return true
        }
        return false

    }
}



other approach using map
class Solution {
    fun hasCycle(head: ListNode?): Boolean {
      var map = mutableMapOf<ListNode,Int>()
      var temp = head
      while(temp!=null)
{
    if(map.containsKey(temp))
        return true
        map.put(temp,1)
        temp = temp.next
}
return false

    }
}
